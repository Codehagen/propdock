generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  apiKey              String?   @unique
  plan                String    @default("basic")
  credits             Int       @default(3)
  image               String?
  language            String?   @default("english")
  onboardingEmailSent Boolean   @default(false)

  accounts             Account[]
  sessions             Session[]
  projects             Project[]
  notificationSettings NotificationSetting[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  workspaceId   Int?
  workspace     Workspace?  @relation(fields: [workspaceId], references: [id])

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Project {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  channels  Channel[]
  metrics   Metrics[]
  customers Customer[]

  createdAt DateTime @default(now())

  @@map(name: "projects")
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  events    Event[]
  createdAt DateTime @default(now())

  @@unique([projectId, name])
  @@map(name: "channels")
}

model Event {
  id         String    @id @default(cuid())
  name       String
  channelId  String
  channel    Channel   @relation(fields: [channelId], references: [id])
  userId     String
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  icon       String
  notify     Boolean
  tags       Json
  createdAt  DateTime  @default(now())

  @@map(name: "events")
}

model Metrics {
  id            String  @id @default(cuid())
  projectId     String  @unique
  logsUsed      Int     @default(0)
  logsLimit     Int     @default(1000)
  channelsUsed  Int     @default(1)
  channelsLimit Int     @default(3)
  seatsUsed     Int     @default(1)
  projectsUsed  Int     @default(1)
  project       Project @relation(fields: [projectId], references: [id])

  @@map(name: "metrics")
}

model Customer {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  name      String?
  email     String?
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  events    Event[]

  @@unique([userId, projectId])
  @@map(name: "customers")
}

model NotificationSetting {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType @default(DISCORD)
  details   Json // Details like webhook URL, mobile number, etc.
  enabled   Boolean          @default(true)
  createdAt DateTime         @default(now())

  @@map(name: "notification_settings")
}

enum NotificationType {
  DISCORD
  SLACK
  MOBILE
}

model Workspace {
  id            Int        @id @default(autoincrement())
  name          String
  users         User[]
  properties    Property[]
  buildings     Building[]
  contracts     Contract[]
}

model Property {
  id            Int       @id @default(autoincrement())
  name          String
  workspaceId   Int
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
  buildings     Building[]
  tenants       Tenant[]
  contracts     Contract[]
  analysis      FinancialAnalysisProperty[]
}

model Building {
  id            Int       @id @default(autoincrement())
  name          String
  address       String
  gnr           Int
  bnr           Int 
  snr           Int 
  fnr           Int
  workspaceId   Int
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
  propertyId    Int
  property      Property   @relation(fields: [propertyId], references: [id])
  floors        Floor[]
  tenants       Tenant[]
  contracts     Contract[]
  analysis      FinancialAnalysisBuilding[]
}

model Floor {
  id            Int       @id @default(autoincrement())
  number        Int
  buildingId    Int
  building      Building  @relation(fields: [buildingId], references: [id])
  maxTotalKvm   Int
  maxOfficeKvm  Int
  maxCommonKvm  Int
  officeSpaces  OfficeSpace[]
  tenants       Tenant[]
  commonAreas   CommonArea[]
  contracts     Contract[]
}

model OfficeSpace {
  id            Int       @id @default(autoincrement())
  name          String
  sizeKvm       Float
  floorId       Int
  floor         Floor     @relation(fields: [floorId], references: [id])
  tenants       Tenant[]
  contract      Contract?
  isRented      Boolean
}

model CommonArea {
  id            Int       @id @default(autoincrement())
  name          String
  sizeKvm       Float
  floorId       Int
  floor         Floor     @relation(fields: [floorId], references: [id])
  priceWeight   Float
}

model Tenant {
  id            Int            @id @default(autoincrement())
  name          String
  orgnr         Int?
  numEmployees  Int            @default(0)
  buildingId    Int
  building      Building       @relation(fields: [buildingId], references: [id])
  floorId       Int?
  floor         Floor?         @relation(fields: [floorId], references: [id])
  officeSpaceId Int?
  officeSpace   OfficeSpace?   @relation(fields: [officeSpaceId], references: [id])
  contacts      ContactPerson[]
  contracts     Contract[]
  propertyId    Int
  property      Property   @relation(fields: [propertyId], references: [id])
}

model Contract {
  id              Int           @id @default(autoincrement())
  tenantId        Int
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  buildingId      Int
  building        Building      @relation(fields: [buildingId], references: [id])
  contractType    ContractType
  startDate       DateTime
  endDate         DateTime
  negotiationDate DateTime
  baseRent        Float
  indexationType  IndexationType
  indexValue      Float?
  workspaceId     Int
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  propertyId      Int
  property        Property       @relation(fields: [propertyId], references: [id])
  floorId         Int?
  floor           Floor?         @relation(fields: [floorId], references: [id])
  officeSpaceId   Int?           @unique
  officeSpace     OfficeSpace?   @relation(fields: [officeSpaceId], references: [id])
}

enum ContractType {
  LEASE
  SUBLEASE
  INTERNAL
}

enum IndexationType {
  MARKET
  CPI
  MANUAL
}

model ContactPerson {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  phone     String?
  fnr       Int?
  tenantId  Int
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
}

model FinancialAnalysisBuilding {
  id           Int     @id @default(autoincrement())
  buildingId   Int
  building     Building @relation(fields: [buildingId], references: [id])
}

model FinancialAnalysisProperty {
  id           Int     @id @default(autoincrement())
  propertyId   Int
  property     Property   @relation(fields: [propertyId], references: [id])
}

// if we need full reset : npx prisma db push --force-reset
