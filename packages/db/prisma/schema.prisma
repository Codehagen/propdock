generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String?                @unique
  emailVerified          DateTime?
  phone                  String?
  plan                   String                 @default("basic")
  credits                Int                    @default(3)
  image                  String?
  language               String?                @default("english")
  onboardingEmailSent    Boolean                @default(false)
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @default(now()) @map("updated_at")
  stripeCustomerId       String?                @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?                @unique @map("stripe_subscription_id")
  stripePriceId          String?                @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?              @map("stripe_current_period_end")
  workspaceId            String?
  Document               Document[]
  communications         TenantCommunications[]
  accessTokens           UserAccessToken[]
  apiKeys                UserApiKey[]
  accounts               Account[]
  sessions               Session[]
  workspace              Workspace?             @relation(fields: [workspaceId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id               String                 @id @default(cuid())
  name             String
  orgnr            Int?
  address          String?
  postalCode       String?
  city             String?
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @default(now()) @map("updated_at")
  buildings        Building[]
  contracts        Contract[]
  invoices         CustomerInvoice[]
  Document         Document[]
  properties       Property[]
  apiKeys          WSApiKey[]
  accessTokens     WorkspaceAccessToken[]
  users            User[]
  internalInvoices InternalInvoice[]
  invites          WorkspaceInvite[]
}

model Property {
  id           String                      @id @default(cuid())
  name         String
  type         String
  orgnr        Int?
  workspaceId  String
  accountingId Int?
  createdAt    DateTime                    @default(now()) @map("created_at")
  updatedAt    DateTime                    @default(now()) @map("updated_at")
  accounting   BalancedAccounts?
  buildings    Building[]
  contracts    Contract[]
  Document     Document[]
  analysis     FinancialAnalysisProperty[]
  workspace    Workspace                   @relation(fields: [workspaceId], references: [id])
  tenants      Tenant[]
}

model Building {
  id          String                      @id @default(cuid())
  name        String
  address     String
  gnr         Int
  bnr         Int
  snr         Int
  fnr         Int
  workspaceId String
  propertyId  String
  createdAt   DateTime                    @default(now()) @map("created_at")
  updatedAt   DateTime                    @default(now()) @map("updated_at")
  property    Property                    @relation(fields: [propertyId], references: [id])
  workspace   Workspace                   @relation(fields: [workspaceId], references: [id])
  contracts   Contract[]
  Document    Document[]
  analysis    FinancialAnalysisBuilding[]
  floors      Floor[]
  tenants     Tenant[]
}

model Floor {
  id           String        @id @default(cuid())
  number       Int
  buildingId   String
  maxTotalKvm  Int
  maxOfficeKvm Int
  maxCommonKvm Int
  commonAreas  CommonArea[]
  building     Building      @relation(fields: [buildingId], references: [id])
  officeSpaces OfficeSpace[]
  tenants      Tenant[]
  contracts    Contract[]    @relation("ContractToFloor")
}

model OfficeSpace {
  id        String     @id @default(cuid())
  name      String
  sizeKvm   Float
  floorId   String
  isRented  Boolean
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  floor     Floor      @relation(fields: [floorId], references: [id])
  tenants   Tenant[]
  contracts Contract[] @relation("ContractToOfficeSpace")
}

model CommonArea {
  id          String   @id @default(cuid())
  name        String
  sizeKvm     Float
  floorId     String
  priceWeight Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  floor       Floor    @relation(fields: [floorId], references: [id])
}

model Tenant {
  id             String                 @id @default(cuid())
  name           String
  orgnr          Int?
  numEmployees   Int                    @default(0)
  buildingId     String
  floorId        String?
  officeSpaceId  String?
  propertyId     String
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @default(now()) @map("updated_at")
  contacts       ContactPerson[]
  contracts      Contract[]
  invoices       CustomerInvoice[]
  Document       Document[]
  building       Building               @relation(fields: [buildingId], references: [id])
  floor          Floor?                 @relation(fields: [floorId], references: [id])
  officeSpace    OfficeSpace?           @relation(fields: [officeSpaceId], references: [id])
  property       Property               @relation(fields: [propertyId], references: [id])
  communications TenantCommunications[]
}

model Contract {
  id               String          @id @default(cuid())
  workspaceId      String
  tenantId         String
  landlordOrgnr    Int?
  landlordName     String?
  contractType     ContractType?
  propertyId       String
  buildingId       String
  contactId        Int
  contactName      String?
  contactEmail     String?
  contactPhone     String?
  startDate        DateTime?
  endDate          DateTime?
  negotiationDate  DateTime?
  isRenewable      Boolean?        @map("is_renewable")
  renewablePeriod  DateTime?       @map("renewable_period")
  indexationType   IndexationType?
  indexValue       Float?
  indexationDate   DateTime?
  baseRent         Float?
  currency         String?
  currencyIso      String?
  rentPeriod       Int?
  vatTerms         String?
  businessCategory String?
  collateral       Boolean?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  building         Building        @relation(fields: [buildingId], references: [id])
  contact          ContactPerson   @relation(fields: [contactId], references: [id])
  property         Property        @relation(fields: [propertyId], references: [id])
  tenant           Tenant          @relation(fields: [tenantId], references: [id])
  workspace        Workspace       @relation(fields: [workspaceId], references: [id])
  floors           Floor[]         @relation("ContractToFloor")
  officeSpaces     OfficeSpace[]   @relation("ContractToOfficeSpace")
}

model ContactPerson {
  id        Int        @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  fnr       String?
  tenantId  String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  contracts Contract[]
}

model BalancedAccounts {
  id         Int      @id @default(autoincrement())
  propertyId String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  property   Property @relation(fields: [propertyId], references: [id])
}

model FinancialAnalysisBuilding {
  id               String                            @id @default(cuid())
  buildingId       String
  createdAt        DateTime                          @default(now()) @map("created_at")
  updatedAt        DateTime                          @default(now()) @map("updated_at")
  name             String
  rentableArea     Int
  ratioAreaOffice  Float?
  ratioAreaMerch   Float?
  ratioAreaMisc    Float?
  rentPerArea      Int
  avgExpiryPeriod  Int
  appreciationDate DateTime
  lastDayOfYear    DateTime
  lastBalanceDate  DateTime
  numMonthsOfYear  Int
  vacancyPerYear   Json?
  kpi1             Float
  kpi2             Float
  kpi3             Float
  kpi4             Float
  sumValueNow      Int
  sumValueExit     Int
  costs            FinancialAnalysisBuildingCosts?
  useCalcROI       Boolean
  roiWeightedYield Float?
  roiInflation     Float?
  roiCalculated    Float?
  roiManual        Float?
  marketRentOffice Int
  marketRentMerch  Int
  marketRentMisc   Int
  usePrimeYield    Boolean
  manYieldOffice   Float?
  manYieldMerch    Float?
  manYieldMisc     Float?
  manYieldWeighted Float?
  building         Building                          @relation(fields: [buildingId], references: [id])
  incomeUnits      FinancialAnalysisBuildingIncome[]
}

model FinancialAnalysisProperty {
  id         String   @id @default(cuid())
  propertyId String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  property   Property @relation(fields: [propertyId], references: [id])
}

model WSApiKey {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  validTo     DateTime?
  isActive    Boolean             @default(true)
  serviceName String
  secret      String              @unique
  type        ServiceProviderType @default(OTHER)
  workspaceId String
  workspace   Workspace           @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, serviceName])
  @@index([type])
  @@index([workspaceId, serviceName])
}

model UserApiKey {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  validTo     DateTime?
  isActive    Boolean             @default(true)
  serviceName String
  secret      String              @unique
  type        ServiceProviderType @default(OTHER)
  userId      String
  user        User                @relation(fields: [userId], references: [id])

  @@unique([userId, serviceName])
}

model UserAccessToken {
  id          Int      @id @default(autoincrement())
  validTo     DateTime
  serviceName String
  secret      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, serviceName])
}

model WorkspaceAccessToken {
  id          Int       @id @default(autoincrement())
  validTo     DateTime
  serviceName String
  secret      String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, serviceName])
  @@index([workspaceId, serviceName])
}

model TenantCommunications {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  type       String
  identifier String
  userId     String
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model CustomerInvoice {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  workspaceId String
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model Document {
  id          String     @id
  title       String?
  description String?
  externalId  String?    @unique
  status      String?
  storageKey  String?
  contentType String?
  signedAt    DateTime?
  signers     Json?
  downloadUrl String?
  tenantId    String?
  propertyId  String?
  userId      String?
  workspaceId String?
  buildingId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  Building    Building?  @relation(fields: [buildingId], references: [id])
  Property    Property?  @relation(fields: [propertyId], references: [id])
  Tenant      Tenant?    @relation(fields: [tenantId], references: [id])
  users       User?      @relation(fields: [userId], references: [id])
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([buildingId])
  @@index([propertyId])
  @@index([tenantId])
  @@index([userId])
  @@index([workspaceId])
}

model InternalInvoice {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  workspaceId   String
  amount        Float?
  currency      String?
  dueDate       DateTime?
  paidAt        DateTime?
  status        String?
  description   String?
  invoiceNumber String?
  downloadUrl   String?
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@map("internal_invoices")
}

model FinancialAnalysisBuildingIncome {
  id                          String                    @id @default(cuid())
  financialAnalysisBuildingId String
  typeDescription             String?
  areaPerUnit                 Float?
  valuePerUnit                Float?
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updatedAt                   DateTime                  @default(now()) @map("updated_at")
  financialAnalysisBuilding   FinancialAnalysisBuilding @relation(fields: [financialAnalysisBuildingId], references: [id])

  @@map("financial_analysis_building_income")
}

model FinancialAnalysisBuildingCosts {
  id                          String                    @id @default(cuid())
  financialAnalysisBuildingId String                    @unique
  costName                    String?
  costType                    String?
  ownerCostsMethod            Boolean
  ownerCostsManual            Float?
  costMaintenance             Float?
  costInsurance               Float?
  costRevision                Float?
  costAdm                     Float?
  costOther                   Float?
  costNegotiation             Float?
  costLegalFees               Float?
  costConsultFees             Float?
  costAssetMgmt               Float?
  costSum                     Float?
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updatedAt                   DateTime                  @default(now()) @map("updated_at")
  financialAnalysisBuilding   FinancialAnalysisBuilding @relation(fields: [financialAnalysisBuildingId], references: [id])

  @@map("financial_analysis_building_costs")
}

model WorkspaceInvite {
  id          String    @id @default(cuid())
  email       String
  expires     DateTime
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())

  @@unique([email, workspaceId])
  @@index([workspaceId])
}

enum ContractType {
  LEASE
  SUBLEASE
  INTERNAL
}

enum IndexationType {
  MARKET
  CPI
  MANUAL
}

enum ServiceProviderType {
  ACCOUNTING
  OTHER
}
